;; -*- mode: scheme-mode -*-
(module
 (export "memory" (memory $0))
 (memory $0 1 256)
 (global (export "hashsize") i32 (i32.const 32))
 (global (export "offset") i32 (i32.const 112))

 (export "update" (func $updateBuf))
 (export "final" (func $finalBuf))
 (export "reset" (func $reset))
 (export "isClosed" (func $isClosed))
 (start $reset)
 ;; memory layout: h[0..31], chunk[32..95], filled[96..99], pad[100..103], len[104...111], buffer[112...]
 (func $reset
       (i32.store align=4 (i32.const 0) (i32.const 0x6a09e667))
       (i32.store align=4 (i32.const 4) (i32.const 0xbb67ae85))
       (i32.store align=4 (i32.const 8) (i32.const 0x3c6ef372))
       (i32.store align=4 (i32.const 12) (i32.const 0xa54ff53a))
       (i32.store align=4 (i32.const 16) (i32.const 0x510e527f))
       (i32.store align=4 (i32.const 20) (i32.const 0x9b05688c))
       (i32.store align=4 (i32.const 24) (i32.const 0x1f83d9ab))
       (i32.store align=4 (i32.const 28) (i32.const 0x5be0cd19))
       (i32.store offset=96 align=4 (i32.const 0) (i32.const 0))
       (i64.store offset=108 align=8 (i32.const 0) (i64.const 0))
       )
 (func $isClosed (result i32) (i32.lt_s (i32.load offset=96 align=4 (i32.const 0)) (i32.const 0)))
 
 (func $updateBuf (param $offs i32) (param $bytes i32)
       (local $filled i32)
       (local $copyend i32)
       (set_local $filled (i32.load offset=96 align=4 (i32.const 0)))
       (if (i32.lt_s (get_local $filled) (i32.const 0)) (return))
       (i64.store offset=104 align=8 (i32.const 0) (i64.add (i64.load offset=104 align=8 (i32.const 0)) (i64.extend_u/i32 (get_local $bytes))))
       
       (loop $loop
             (if (i32.lt_u (get_local $bytes) (i32.sub (i32.const 64) (get_local $filled)))
                 (set_local $copyend (i32.add (get_local $filled) (get_local $bytes)))
                 (set_local $copyend (i32.const 64)))
             (call $memcpy (get_local $filled) (get_local $offs) (get_local $copyend))
             (if (i32.ne (get_local $copyend) (i32.const 64))
                 (block
                  (i32.store offset=96 align=4 (i32.const 0) (get_local $copyend))
                  (return)))
             (call $update)
             (set_local $offs (i32.add (get_local $offs) (i32.sub (i32.const 64) (get_local $filled))))
             (set_local $bytes (i32.sub (get_local $bytes) (i32.sub (i32.const 64) (get_local $filled))))
             (set_local $filled (i32.const 0))
             (br $loop)
             )
       )
 (func $finalBuf
       (local $filled i32)
       (set_local $filled (i32.load offset=96 align=4 (i32.const 0)))
       (if (i32.lt_s (get_local $filled) (i32.const 0)) (return))
       (i32.store8 offset=32 (get_local $filled) (i32.const 0x80))
       (set_local $filled (i32.add (get_local $filled) (i32.const 1)))
       (if (i32.gt_u (get_local $filled) (i32.const 56))
           (block
            (call $memset (get_local $filled) (i32.const 0) (i32.const 64))
            (call $update)
            (set_local $filled (i32.const 0))
            ))
       (call $memset (get_local $filled) (i32.const 0) (i32.const 56))
       (i64.store offset=32 align=8 (i32.const 56) (call $big64 (i64.shl (i64.load offset=104 align=8 (i32.const 0)) (i64.const 3))))
       (call $update)
       
       (i32.store align=4 (i32.const  0) (call $big32 (i32.load align=4 (i32.const 0))))
       (i32.store align=4 (i32.const  4) (call $big32 (i32.load align=4 (i32.const 4))))
       (i32.store align=4 (i32.const  8) (call $big32 (i32.load align=4 (i32.const 8))))
       (i32.store align=4 (i32.const 12) (call $big32 (i32.load align=4 (i32.const 12))))
       (i32.store align=4 (i32.const 16) (call $big32 (i32.load align=4 (i32.const 16))))
       (i32.store align=4 (i32.const 20) (call $big32 (i32.load align=4 (i32.const 20))))
       (i32.store align=4 (i32.const 24) (call $big32 (i32.load align=4 (i32.const 24))))
       (i32.store align=4 (i32.const 28) (call $big32 (i32.load align=4 (i32.const 28))))
       (i32.store offset=96 align=4 (i32.const 0) (i32.const -1))
       )
 
 
 (func $big32 (param $v i32) (result i32)
       (set_local $v (i32.or
                        (i32.shr_u (i32.and (get_local $v) (i32.const 0xff00ff00)) (i32.const 8))
                        (i32.shl   (i32.and (get_local $v) (i32.const 0x00ff00ff)) (i32.const 8))
                        ))
       (return (i32.or
                        (i32.shr_u (i32.and (get_local $v) (i32.const 0xffff0000)) (i32.const 16))
                        (i32.shl   (i32.and (get_local $v) (i32.const 0x0000ffff)) (i32.const 16))
                        )))
 (func $big64 (param $v i64) (result i64)
       (set_local $v (i64.or
                      (i64.shr_u (i64.and (get_local $v) (i64.const 0xff00ff00ff00ff00)) (i64.const 8))
                      (i64.shl   (i64.and (get_local $v) (i64.const 0x00ff00ff00ff00ff)) (i64.const 8))
                      ))
       (set_local $v (i64.or
                      (i64.shr_u (i64.and (get_local $v) (i64.const 0xffff0000ffff0000)) (i64.const 16))
                      (i64.shl   (i64.and (get_local $v) (i64.const 0x0000ffff0000ffff)) (i64.const 16))
                      ))
       (return (i64.or
                      (i64.shr_u (i64.and (get_local $v) (i64.const 0xffffffff00000000)) (i64.const 32))
                      (i64.shl   (i64.and (get_local $v) (i64.const 0x00000000ffffffff)) (i64.const 32))
                      )))
 (func $memcpy (param $start i32) (param $src i32) (param $end i32)
       (local $end8 i32)
       (if (i32.and (i32.eqz (i32.and (get_local $start) (i32.const 0x7))) (i32.eqz (i32.and (get_local $src) (i32.const 0x7))))
           (block $loop8-out
                  (set_local $end8 (i32.sub (get_local $end) (i32.const 8)))
                  (loop $loop8 (if (i32.ge_s (get_local $start) (get_local $end8)) (br $loop8-out))
                        (i64.store offset=32 align=8 (get_local $start) (i64.load align=8 (get_local $src)))
                        (set_local $start (i32.add (get_local $start) (i32.const 8)))
                        (set_local $src (i32.add (get_local $src) (i32.const 8)))
                        (br $loop8))
                  ))
       (loop $loop (if (i32.eq (get_local $start) (get_local $end)) (return))
              (i32.store8 offset=32 (get_local $start) (i32.load8_u (get_local $src)))
              (set_local $start (i32.add (get_local $start) (i32.const 1)))
              (set_local $src (i32.add (get_local $src) (i32.const 1)))
              (br $loop)))
 (func $memset (param $start i32) (param $v8 i32) (param $end i32)
       (local $end8 i32)
       (local $v64 i64)
       (if (i32.eqz (i32.and (get_local $start) (i32.const 0x7)))
           (block $loop8-out
                  (set_local $end8 (i32.sub (get_local $end) (i32.const 8)))
                  (set_local $v64 (i64.extend_u/i32 (i32.and (get_local $v8) (i32.const 0xff))))
                  (set_local $v64 (i64.or (i64.shl (get_local $v64) (i64.const 8)) (get_local $v64)))
                  (set_local $v64 (i64.or (i64.shl (get_local $v64) (i64.const 16)) (get_local $v64)))
                  (set_local $v64 (i64.or (i64.shl (get_local $v64) (i64.const 32)) (get_local $v64)))
                  (loop $loop8 (if (i32.ge_s (get_local $start) (get_local $end8)) (br $loop8-out))
                        (i64.store offset=32 align=8 (get_local $start) (get_local $v64))
                        (set_local $start (i32.add (get_local $start) (i32.const 8)))
                        (br $loop8))
                  ))
       (loop $loop (if (i32.eq (get_local $start) (get_local $end)) (return))
              (i32.store8 offset=32 (get_local $start) (get_local $v8))
              (set_local $start (i32.add (get_local $start) (i32.const 1)))
              (br $loop)))
 ;; local func
 (func $wn (param $w16 i32) (param $w15 i32) (param $w7 i32) (param $w2 i32) (result i32)
       (return (i32.add (i32.add (i32.add (get_local $w16)
                                          (i32.xor (i32.xor (i32.rotr (get_local $w15) (i32.const 7))
                                                            (i32.rotr (get_local $w15) (i32.const 18)))
                                                   (i32.shr_u (get_local $w15) (i32.const 3))))
                                 (get_local $w7))
                        (i32.xor (i32.xor (i32.rotr (get_local $w2) (i32.const 17))
                                          (i32.rotr (get_local $w2) (i32.const 19)))
                                 (i32.shr_u (get_local $w2) (i32.const 10))))))
 (func $t1 (param $e i32) (param $f i32) (param $g i32) (param $h i32) (param $w i32) (param $K i32) (result i32)
       (return (i32.add (i32.add (i32.add (i32.add (get_local $h)
                                                   ;; s1                   
                                                   (i32.xor (i32.xor (i32.rotr (get_local $e) (i32.const 6))
                                                                     (i32.rotr (get_local $e) (i32.const 11)))
                                                            (i32.rotr (get_local $e) (i32.const 25))))
                                          ;; ch
                                          (i32.xor (i32.and (get_local $e) (get_local $f))
                                                   (i32.and (i32.xor (get_local $e) (i32.const -1)) (get_local $g))))
                                 (get_local $K))
                        (get_local $w))))
 (func $t2 (param $a i32) (param $b i32) (param $c i32) (result i32)
       (return (i32.add (i32.xor (i32.xor (i32.rotr (get_local $a) (i32.const 2))
                                          (i32.rotr (get_local $a) (i32.const 13)))
                                 (i32.rotr (get_local $a) (i32.const 22)))
                        ;;maj                         
                        (i32.xor (i32.xor (i32.and (get_local $a) (get_local $b))
                                          (i32.and (get_local $a) (get_local $c)))
                                 (i32.and (get_local $b) (get_local $c))))))
 
 
 ;; remain for debug
 (func $final (param $filled i32) (param $bytesl i32) (param $bytesh i32)
       (i32.store8 offset=32 (get_local $filled) (i32.const 0x80))
       (set_local $filled (i32.add (get_local $filled) (i32.const 1)))
       (if (i32.gt_u (get_local $filled) (i32.const 56))
           (block
            (call $memset (get_local $filled) (i32.const 0) (i32.const 64))
            (call $update)
            (set_local $filled (i32.const 0))
            ))
       (call $memset (get_local $filled) (i32.const 0) (i32.const 56))
       (i64.store offset=32 align=8 (i32.const 56) (call $big64
                                       (i64.or (i64.shl (i64.extend_u/i32 (get_local $bytesh)) (i64.const 35))
                                               (i64.shl (i64.extend_u/i32 (get_local $bytesl)) (i64.const 3)))
                                       ))
       (call $update)
       
       (i32.store align=4 (i32.const  0) (call $big32 (i32.load align=4 (i32.const 0))))
       (i32.store align=4 (i32.const  4) (call $big32 (i32.load align=4 (i32.const 4))))
       (i32.store align=4 (i32.const  8) (call $big32 (i32.load align=4 (i32.const 8))))
       (i32.store align=4 (i32.const 12) (call $big32 (i32.load align=4 (i32.const 12))))
       (i32.store align=4 (i32.const 16) (call $big32 (i32.load align=4 (i32.const 16))))
       (i32.store align=4 (i32.const 20) (call $big32 (i32.load align=4 (i32.const 20))))
       (i32.store align=4 (i32.const 24) (call $big32 (i32.load align=4 (i32.const 24))))
       (i32.store align=4 (i32.const 28) (call $big32 (i32.load align=4 (i32.const 28))))
       )
 (func $update)
 )